name: Release

on:
  # Trigger the workflow on the new 'v*' tag created
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  create_release:
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  build_artifact:
    needs: [create_release]
    name: ${{ matrix.os }}/GHC ${{ matrix.ghc }}/${{ github.ref }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        cabal: ["3.10"]
        ghc: ["9.6.3"]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - if: matrix.os == 'ubuntu-latest'
        run: |
          echo "os_name=linux" >> $GITHUB_ENV

      - if: matrix.os == 'macOS-latest'
        run: |
          echo "os_name=darwin" >> $GITHUB_ENV

      - if: matrix.os == 'windows-latest'
        run: |
          echo "os_name=windows" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "EXT=.exe" | Out-File -FilePath $env:GITHUB_ENV -Append

      - uses: haskell-actions/setup@v2
        name: Setup Haskell
        id: setup-haskell-cabal
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - name: Freeze
        run: |
          cabal freeze

      - name: Cache ~/.cabal/store
        uses: actions/cache@v3
        with:
          path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}

      - name: Build binary
        run: |
          mkdir bin
          cabal install exe:pig --install-method=copy --overwrite-policy=always --installdir=bin --enable-executable-stripping --enable-library-stripping

      - name: Set binary path name
        if: matrix.os != 'windows-latest'
        run: echo "BINARY_PATH=./bin/pig${{ env.EXT }}" >> $GITHUB_ENV

      - name: Set binary path name
        if: matrix.os == 'windows-latest'
        run: echo "BINARY_PATH=./bin/pig${{ env.EXT }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Compress binary
        uses: svenstaro/upx-action@2.3.0
        with:
          file: ${{ env.BINARY_PATH }}

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        if: matrix.os != 'windows-latest'
        run: echo "UPLOAD_URL=$(cat release_url/release_url.txt)" >> $GITHUB_ENV

      - name: Get Release File Name & Upload URL
        if: matrix.os == 'windows-latest'
        run: echo "UPLOAD_URL=$(cat release_url/release_url.txt)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload Release Asset
        id: upload-release-asset
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.BINARY_PATH }}
          asset_name: pig-amd64-${{ env.os_name }}${{ env.EXT }}
          asset_content_type: application/octet-stream
