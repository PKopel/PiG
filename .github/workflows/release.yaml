name: Release

on:
  # Trigger the workflow on the new 'v*' tag created
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build:
    outputs:
      hash-linux: ${{ steps.hash.outputs.hash }}
      hash-macos: ${{ steps.hash-mac.outputs.hash }}
      hash-windows: ${{ steps.hash-win.outputs.hash }}
    name: ${{ matrix.os }}/GHC ${{ matrix.ghc }}/${{ github.ref }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        cabal: ["3.10"]
        ghc: ["9.6.3"]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - if: matrix.os == 'ubuntu-latest'
        run: |
          echo "os_name=linux" >> $GITHUB_ENV

      - if: matrix.os == 'macOS-latest'
        run: |
          echo "os_name=darwin" >> $GITHUB_ENV

      - if: matrix.os == 'windows-latest'
        run: |
          echo "os_name=windows" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "EXT=.exe" | Out-File -FilePath $env:GITHUB_ENV -Append

      - uses: haskell-actions/setup@v2
        name: Setup Haskell
        id: setup-haskell-cabal
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - name: Freeze
        run: |
          cabal freeze

      - name: Cache ~/.cabal/store
        uses: actions/cache@v3
        with:
          path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}

      - name: Build binary
        run: |
          mkdir bin
          cabal install exe:pig --install-method=copy --overwrite-policy=always --installdir=bin --enable-executable-stripping --enable-library-stripping

      - name: Set binary path name
        if: matrix.os != 'windows-latest'
        run: echo "BINARY_PATH=./bin/pig${{ env.EXT }}" >> $GITHUB_ENV

      - name: Set binary path name
        if: matrix.os == 'windows-latest'
        run: echo "BINARY_PATH=./bin/pig${{ env.EXT }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Compress binary
        uses: svenstaro/upx-action@2.3.0
        with:
          files: ${{ env.BINARY_PATH }}

      - name: Generate hashes
        if: matrix.os == 'ubuntu-latest'
        id: hash
        run: |
          # sha256sum generates sha256 hash for all artifacts.
          # base64 -w0 encodes to base64 and outputs on a single line.
          # sha256sum artifact1 artifact2 ... | base64 -w0
          echo "hash=$(sha256sum ${{ env.BINARY_PATH }} | base64 -w0)" >> $GITHUB_ENV

      - name: Generate hashes
        if: matrix.os == 'macOS-latest'
        id: hash-mac
        run: |
          # sha256sum generates sha256 hash for all artifacts.
          # base64 -w0 encodes to base64 and outputs on a single line.
          # sha256sum artifact1 artifact2 ... | base64 -w0
          echo "hash=$(shasum -a 256 ${{ env.BINARY_PATH }} | base64 -w0)" >> $GITHUB_ENV

      - name: Generate hashes
        if: matrix.os == 'windows-latest'
        id: hash-win
        run: |
          # sha256sum generates sha256 hash for all artifacts.
          # base64 -w0 encodes to base64 and outputs on a single line.
          # sha256sum artifact1 artifact2 ... | base64 -w0
          echo "hash=$(sha256sum ${{ env.BINARY_PATH }} | base64 -w0)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload binary
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # tag=v3.1.0
        with:
          name: pig-amd64-${{ env.os_name }}${{ env.EXT }}
          path: ${{ env.BINARY_PATH }}
          if-no-files-found: error
          retention-days: 5

  provenance:
    needs: [build]
    strategy:
      matrix:
        os: [linux, macos, windows]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: "${{ needs.build.outputs[format('hash-{0}', matrix.os)] }}"
      upload-assets: true # Optional: Upload to a new release
      continue-on-error: true

  release:
    needs: [build, provenance]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download linux binary
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # tag=v2.1.0
        with:
          name: pig-amd64-linux

      - name: Download macOS binary
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # tag=v2.1.0
        with:
          name: pig-amd64-darwin

      - name: Download windows binary
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # tag=v2.1.0
        with:
          name: pig-amd64-windows.exe

      - name: Upload assets
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5 # v0.1.14
        with:
          files: |
            pig-amd64-linux
            pig-amd64-darwin
            pig-amd64-windows.exe
